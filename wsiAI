#!/usr/bin/zsh
# Operation in bash not guaranteed.
# Copyright (c) 2024, 2025 Quantius Benignus
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#--------------------------------------------------------------------------

# NAME: wsi 
# PREREQUSITES: 
#  - whisper.cpp installation (see https://github.com/ggerganov/whisper.cpp) or a whisperfile
#  - recent versions of 'sox', 'curl', 'xsel' or 'wl-copy' CLI tools from your system's repositories.
#  - optional llama.cpp or llamafile (and models) for AI assistant/translator functionality.
#  - optional xdotool (X11) or ydotool (Wayland) for automatic paste after successful transcription
#  - Piper neural text-to-speech engine for spoken AI assistant response 
#--------------------------------------------------------------------------
#Above all, make sure we are not already running:
pidof -q wsiAI && exit 0

#---USER CONFIGURATION BLOCK----------------------------------------------------------------
#The main configuration for this and all other BlahST tools is now in blahst.cfg, please, edit that file as needed.
source $HOME/.config/blahst.cfg
source $HOME/.local/bin/blahst-helpers
#Local overrides:
AUTOPASTE=1
#PRIMESEL=1
#---END USER CONFIG BLOCK-------------------------------------------------------------------

#Hear the complaints of the above tools and do not continue with the sequence:
set -e

# Process command line arguments
while [ $# -gt 0 ]; do
    case "$1" in
        -p|--primary)
            PRIMESEL=1
            shift
            ;;
        -c|--clipboard)
            # This is transitional warning due to breaking change (will be removed in the future). Clipboard is now the default:
            desknote "Breaking Change:" "The '-c' flag is deprecated, since clipboard is now default. \n \
            Remove unnecessary '-c' from your desktop shortcut definitions. \n \
            To use primary selection as the text source, use the '-p' flag in your desktop shortcuts."
            shift
            ;;
        -w|--whisperfile)
            whf="$WHISPERFILE"
            shift
            ;;
        -a|--llamafile)
            llamf="$LLAMAFILE --cli"
            shift
            ;;
        -n|--netapi)
            #This uses the hostname or IP and port specified in the config block
            #Can be overwritten, supplied as command line argument IP:PORT instead of this option
            IPnPORT="$WHOST:$WPORT" 
            if [[ "$(curl -s -f -o /dev/null -w '%{http_code}' $IPnPORT)" != "200" ]]; then
                echo "Can't connect to whisper.cpp server at provided address!" >&2
                desknote "No connection to Whisper.cpp server" "No whisper.cpp server at $IPnPORT."
                #Uncomment the next line if you want to have the server start locally on a call (assuming whserver symlink is set).
                #pidof whserver > /dev/null  2>&1 || { whserver --host 0.0.0.0 --port 58080 -t $NTHR -nt -m $WMODEL 2>/dev/null & }
                exit 1
            fi
            shift
            ;;
        -h|--help)
            echo -e "Usage: $0 [-p|--primary] [-n|--netapi] [-w|--whisperfile] [-l|--llamafile]\n"
            echo -e "  -p, --primary: Use PRIMARY selection instead of clipboard\n"
            echo -e "  -n, --netapi: Use whisper.cpp server with the host:port in the script's GONFIG block\n"
            echo -e "  -w, --whisperfile: Use whisperfile instead of standalone whisper.cpp. Note that the whisperfile will use the script-configured (not embedded) model.\n"
            echo -e "  -a, --llamafile: Use llamafile instead of standalone llama.cpp. Note that the llamafile will use the script-configured (not embedded) LLM model.\n"
            echo -e "Any other non-flag command-line argument is expected to be an <IP:port> pair. Error will occur if diferent."
            echo -e 'Speaking: "Assistant,..." followed by a question, will trigger the AI model response and that will be available for pasting'
            echo -e 'Speaking: "Computer,..." followed by a request, will make the LLM attempt to deliver a Linux command that matches the request'
            echo -e 'Speaking: "Coordinator,..." followed by a task, will make the LLM respond with the task formatted as a TODO item, as in Joplin inline TODOs'
            echo -e 'Saying: "Translator,..." followed by a statement, will make the AI model translate the statement and the translation willl be available for pasting'
            echo -e "The AI functions are experimental and work in progress." 
            echo -e "\nCAUTION: Transfering any AI-generated Linux commands to your command line is at your own risk. Make sure you know what you are doing."
            exit 0
            ;;
        *)
            #The network address and port should have already been sanitized
            IPnPORT=$1
            if [[ "$(curl -s -f -o /dev/null -w '%{http_code}' $IPnPORT)" != "200" ]]; then
                echo "Can't connect to a whisper.cpp server at provided address!" >&2   
                desknote "No connection to Whisper.cpp server" "No whisper.cpp server at $IPnPORT."
                #Uncomment the next line if you want to have the server start locally on a call (assuming whserver symlink is set).
                #pidof whserver > /dev/null  2>&1 || { whserver --host 0.0.0.0 --port 58080 -t $NTHR -nt -m $WMODEL 2>/dev/null & }
                exit 1
            fi
            shift
            ;;
    esac
done
#echo "Recording now: "
rec -q -t wav $ramf rate 16k silence 1 0.1 1% 1 2.0 3% channels 1 2>/dev/null

#Time stamps for timing the performance of the various stages (Un/Comment as needed): 
#stmp=$(date +%s%N)

if [ -n "$IPnPORT" ] ; then 
    #echo "Sending to server now: "
    str=$(curl -S -s $IPnPORT/inference \
        -H "Content-Type: multipart/form-data" \
        -F file="@$ramf" \
        -F temperature="0.0" \
        -F temperature_inc="0.2" \
        -F response_format="text")
elif [[ "$whf" == *.llamafile ]]; then
    #echo "Using $whf:"
    str="$($whf -t $NTHR -nt --gpu auto -f $ramf 2>/dev/null)"     
else
    #A default fallback if the whisper server is offline.
    #echo "Transcribing now: "
    str="$(transcribe -t $NTHR -nt -fa -m $WMODEL -f $ramf 2>/dev/null)" 
fi

#echo "Got text back after: "$((($(date +%s%N) - stmp)/1000000))" ms" 
#stmp=$(date +%s%N)

#Please, note, that if you have disabled extended globbing for some reason, you likely know how to enable it only for this script. 
# Whisper detected non-speech events such as (wind blowing): 
str="${str/\(*\)}"   
str="${str/\[*\]}"
str="${str#$'\n'}"    
str="${str#$'\n'}"
#Prefer the power of zsh, but loose full POSIX compliance.
if [ -n "$ZSH_NAME" ]; then
   str="${str# }"
   str="${str# }"
   str="${(C)str:0:1}${str#?}"
  #Are we engaging with a LLM via a 'wake' word?
   if [[ "$str" == Assistant*  ]]; then
     str="${str#Assistant[,.] }"
     str="${str%'\n'}"
     strai=$($llamf -t $NTHR -c 2048 --temp 0 -ngl 99 --no-display-prompt -n 150 -m $LIGHTLMODEL -no-cnv --prompt "Provide a concise response (but do not explain why is it concise) to the following: $str" 2>/dev/null )
     strai="${strai/\[end of text\]}"
     echo "$strai" | sed 's/\*//g' | piper --model $TTSMODEL --output-raw 2>/dev/null | aplay -r $rtts -f S16_LE -t raw - 2>/dev/null
     str="${(C)str}\n$strai" #We can still paste the result
   elif [[ "$str" == [Tt]ranslator*  ]]; then
     echo $str
     str="${str#[Tt]ranslator[,. ] }"
     echo "$str" | piper --model $TTSMODEL --output-raw 2>/dev/null | aplay -r $rtts -f S16_LE -t raw - 2>/dev/null
     $llamf -t $NTHR -c 1024 --temp 0 -ngl 99 -n 80 -no-cnv -m $LLMODEL --no-display-prompt --prompt "Respond only with the chinese translation, written in chinese only, and nothing more. Translate the following to chinese: $str" 2>/dev/null | sed 's/\*//g; s/\[end of text\]//g' | tee /dev/tty /dev/shm/lmf | piper --model $TRANSMODEL --output-raw 2>/dev/null | aplay -r $rtrans -f S16_LE -t raw - 2>/dev/null
     str="${$(< /dev/shm/lmf)//$'\n'/}"
   elif [[ "$str" == [Cc]omputer*  ]]; then
     if [[ $str == *Grammarly* || $str == *proofread* ]]; then
        if [[ wm == "x11" ]]; then
            selpaste="$(xsel --primary --output)"
        elif [[ wm == "wayland" ]]; then
            selpaste="$(wl-paste --primary --type text)"
        else
            #X11 fallback
            selpaste="$(xsel --primary --output)"
        fi
        str='<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n<|im_start|>user\nBehave like Grammarly on this, by simply providing only the corrected text and nothing else, no explanations, no markdown, etc.: '
        strai=$($llamf -t $NTHR -c 4096 --temp 0 -ngl 99 -mli --no-display-prompt -no-cnv -m $HEAVYMODEL --prompt "$str$selpaste<|im_end|>\n<|im_start|>assistant\n" 2>/dev/null )
        strai="${strai//\*/}"
        str="${strai/\[end of text\]}"
     else
        strai=$($llamf -t $NTHR -c 256 --temp 0 -ngl 99 --no-display-prompt -n 100 -no-cnv -m $LLMODEL --prompt "You are a Linux command helper. To any request, you respond only with a precise linux command. Do not output any other text. Here is the request: $str" 2>/dev/null )
        # | sed 's/[`\*]//g' )
        strai="${strai//\*/}"
        str="${strai/\[end of text\]}"
     fi
   elif [[ "$str" == [Cc]oordinator*  ]]; then
     strai=$($llamf -t $NTHR -c 512 --temp 0 -ngl 99 --no-display-prompt --simple-io -n 100 -no-cnv -m $LLMODEL --prompt "You are a helpful scheduler. When I ask you to schedule a task, you will format it like this: - [ ] @TODO Task body. Let's give it a try: $str" 2>/dev/null )
     str="${strai/\[end of text\]}"
   fi
elif [ -n "$BASH" ]; then
   #Running in bash because you changed the shebang on line 1
   str="${str#*(+([![:space:]]))}"
   str="${str^}"
  #Are we engaging with a LLM via a 'wake' word?
   if [[ "$str" == ?[Aa]ssistant* ]]; then
     str="${str#?[Aa]ssistant[,.] }"
     str="${str^}"
     $llamf -t $NTHR -c 2048 --temp 0 2>/dev/null -ngl 999 -no-cnv -m $LIGHTLMODEL --prompt "Provide a very concise response to the following: $str"  --no-display-prompt -n 150 | tee /dev/tty /dev/shm/lmf | sed 's/\*//g' | piper --model $TTSMODEL --output-raw 2>/dev/null | aplay -r $rtts -f S16_LE -t raw - 2>/dev/null
     str="$str\n"$(< /dev/shm/lmf) #We can still paste the result
   elif [[ "$str" == ?[Tt]ranslator* ]]; then
     str="${str#?[Tt]ranslator[,.] }"
     echo "$str" | piper --model $TTSMODEL --output-raw 2>/dev/null | aplay -r $rtts -f S16_LE -t raw - 2>/dev/null
     $llamf -t $NTHR -c 2048 --temp 0 2>/dev/null -ngl 999 -no-cnv -m $LIGHTLMODEL --no-display-prompt --prompt "Respond in chinese and be concise. Translate the following to chinese: $str"  -n 80 | tee /dev/tty /dev/shm/lmf | sed 's/\*//g' | piper --model $TRANSMODEL --output-raw 2>/dev/null | aplay -r $rtrans -f S16_LE -t raw - 2>/dev/null
     str="$(< /dev/shm/lmf)"
     str=${str#*(+([![:space:]]))}
   elif [[ "$str" == [Cc]omputer*  ]]; then
     if [[ $str == *Grammarly* || $str == *proofread* ]]; then
        if [[ wm == "x11" ]]; then
            selpaste="$(xsel --primary --output)"
        elif [[ wm == "wayland" ]]; then
            selpaste="$(wl-paste --primary --type text)"
        else
            #X11 fallback
            selpaste="$(xsel --primary --output)"
        fi
        str='<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n<|im_start|>user\nBehave like Grammarly on this, by simply providing only the corrected text and nothing else, no explanations, no markdown, etc.: '
        strai=$($llamf -t $NTHR -c 4096 --temp 0 -ngl 99 -mli --no-display-prompt -no-cnv -m $HEAVYMODEL --prompt "$str$selpaste<|im_end|>\n<|im_start|>assistant\n" 2>/dev/null )
        strai="${strai//\*/}"
        str="${strai/\[end of text\]}"
     else
        strai=$($llamf -t $NTHR -c 256 --temp 0 -ngl 99 --no-display-prompt -n 100 -no-cnv -m $LLMODEL --prompt "You are a Linux command helper. To any request, you respond only with a precise linux command. Do not output any other text. Here is the request: $str" 2>/dev/null )
        # | sed 's/[`\*]//g' )
        strai="${strai//\*/}"
        str="${strai/\[end of text\]}"
     fi
   elif [[ "$str" == [Cc]oordinator*  ]]; then
     strai=$($llamf -t $NTHR -c 512 --temp 0 -ngl 99 --no-display-prompt -n 100 -no-cnv -m $LLMODEL --prompt "You are a helpful scheduler. When I ask you to schedule a task, you will format it like this: - [ ] @TODO Task body. Let's give it a try: $str" 2>/dev/null )
     str="${strai/\[end of text\]}"
   fi
else
    #Not testing for AI input if shell is unknown:
    echo "Unknown shell, assuming bash compliance"
    str="${str##+([[:space:]])}"
    str="${str^}"
fi

#We have a result (either recognized text or AI response), now we make a few decisions:
#If this is somehow run in a text console: 
if [[ -z "${DISPLAY}" ]] || [[ -z "${DESKTOP_SESSION}" ]] || [[ -z "${XDG_CURRENT_DESKTOP}" ]]; then
#"Not running in a known graphics environment. Using standard output:
    echo $str ; exit 0
else
#xsel or wl-copy:
#echo "Pasting now: "
 case "$wm" in
    "x11")
        echo $str | { (( $PRIMESEL )) && xsel -ip || xsel -ib; }
	autopaste $wm
        ;;
    "wayland")
	echo $str | { (( $PRIMESEL )) && wl-copy -p || wl-copy; }
	autopaste $wm
        ;;
    *)
        echo $str
        ;;
 esac
fi

#echo "Text processed after another: "$((($(date +%s%N) - stmp)/1000000)) "ms"
